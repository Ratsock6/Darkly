Faille identifiée : Cross-Site Scripting (XSS)
Page: /?page=media&src=nsa

#TODO

Description:
    Le site vulnérable réinjecte directement le paramètre src de l’URL dans l’attribut data d’une balise HTML <object>.
    Exemple :
        http://192.168.0.136/?page=media&src=feur
    génère dans le html :
        <object data="feur"></object>

    Cette absence de filtrage permet d’injecter du code malveillant en utilisant le schéma data:.
    Ainsi, il est possible de forcer le navigateur à interpréter du HTML/JavaScript arbitraire, entraînant une exécution de script côté client (XSS).



Exploitation:
    En injectant une URL de type data:text/html;base64,..., on peut afficher et exécuter du code JavaScript dans le navigateur de la victime.

    Exemple avec un simple alert() :
        http://192.168.0.136/?page=media&src=data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8L3NjcmlwdD4=

    Payload décodé :
        <script>alert("XSS")</script>

    Résultat : le navigateur exécute le script et la faille est confirmée.


Impact:
    Exécution arbitraire de JavaScript dans le navigateur des utilisateurs.
    Vol de cookies de session (document.cookie).
    Redirection vers des pages malveillantes.
    Défiguration ou injection de contenu trompeur (phishing).
    Dans un vrai contexte, compromet gravement la sécurité et la confidentialité des utilisateurs.


Correctif:
    Échapper/encoder correctement les entrées utilisateurs avant de les réinjecter dans du HTML:
        Whitelist / liste blanche : accepter seulement certaines valeurs connues.
        Exemple : si ton site ne doit afficher que nsa, media1, media2 :
        $allowed = ['nsa','media1','media2'];
        if (!in_array($_GET['src'], $allowed)) {
            $src = 'default';
        } else {
            $src = $_GET['src'];
        }

    Restreindre le paramètre src uniquement aux ressources autorisées (ex. : liste blanche de fichiers/URLs).
    Mettre en place une Content Security Policy (CSP) pour limiter l’exécution de scripts inline.
    Vérifier côté serveur et côté client que le paramètre src ne peut pas contenir de schéma dangereux (data:, javascript:, etc.).